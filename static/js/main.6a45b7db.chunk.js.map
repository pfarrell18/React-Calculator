{"version":3,"sources":["Key.js","App.js","serviceWorker.js","index.js"],"names":["Key","number","handleClick","className","onClick","App","useState","value","setValue","arithmetic","setArithmetic","undefined","results","setResults","operation","setOperation","useEffect","addNumber","new_value","updateOperations","operate","num1","num2","operator","numstoCombine","combined_1","combined_2","i","length","console","log","push","Number","join","Calculate","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6a45b7db.chunk.js","sourcesContent":["import React from 'react'\n\nconst Key = ({number,handleClick, className}) => {\n    return(<button onClick ={handleClick} className={className ? \"operator\": \"numberkey\"}>\n        {number}\n    </button>)\n}\n\nexport default Key","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Key from \"./Key\"\nimport OperatorKey from \"./OperatorKey\"\n\nfunction App() {\n\n  const [value, setValue] = useState(\"\")\n  const [arithmetic, setArithmetic] = useState([])\n  const [results, setResults] = useState(undefined)\n  const [operation, setOperation] = useState(\"\")\n\n  useEffect(() => {\n\n  }, [])\n  const clear = () => {\n    setValue(\"\")\n    setArithmetic([])\n    setResults(\"\")\n    setOperation(\"\")\n  }\n\n  const addNumber = (number) => {\n    let new_value = value + operation + number\n    setOperation(\"\")\n    setArithmetic(arithmetic => [...arithmetic, number])\n    setValue(new_value)\n  }\n\n  const updateOperations = (value) => {\n    setArithmetic(arithmetic => [...arithmetic, value])\n    setOperation(value)\n\n  }\n\n  const saveResults = () => {\n    setValue(results)\n    setArithmetic(arithmetic => [...arithmetic, results])\n    setResults(undefined)\n  }\n  const operate = (num1, num2, operator) => {\n\n    if (operator === \"/\") {\n      return (num1 / num2)\n    }\n    if (operator === \"X\") {\n      return (num1 * num2)\n    }\n    if (operator === \"-\") {\n      return (num1 - num2)\n    }\n    if (operator === \"+\") {\n      return (num1 + num2)\n    }\n  }\n  const Calculate = () => {\n    let numstoCombine = []\n    let combined_1 = []\n    let operator = null\n    let combined_2 = []\n\n    for (let i = 0; i < arithmetic.length; i++) {\n      console.log(\"***************************\")\n\n      if (i === arithmetic.length - 1) {\n        numstoCombine.push(arithmetic[i])\n        combined_2 = Number(numstoCombine.join(\"\"))\n        combined_1 = operate(combined_1, combined_2, operator)\n        setResults(combined_1)\n        setArithmetic([])\n        setValue([])\n      }\n      if ((typeof arithmetic[i]) === \"number\") {\n        numstoCombine.push(arithmetic[i])\n      } else {\n        if (combined_1.length === 0) {\n          combined_1 = Number(numstoCombine.join(\"\"))\n          numstoCombine = []\n          operator = arithmetic[i]\n        } else if (combined_2.length === 0) {\n          combined_2 = Number(numstoCombine.join(\"\"))\n          numstoCombine = []\n          if (operator && combined_1.length !== 0 && combined_2.length !== 0) {\n            combined_1 = operate(combined_1, combined_2, operator)\n            combined_2 = []\n            operator = arithmetic[i]\n          }\n        }\n      }\n    }\n\n  }\n\n  return (\n\n    <div className=\"frame\">\n      <div className=\"content\">\n      \n        <h3 className=\"header\">React Calculator</h3>\n        <div className=\"inputs\">{value}</div>\n        <div className=\"results\">\n          <div>{results}</div>\n          {results && <div><button className=\"useresults\" onClick={() => { saveResults() }}>Use!</button></div>}\n        </div>\n        <div className=\"keys\">\n          <Key number={\"รท\"} className=\"operator\" handleClick={() => updateOperations(\"/\")} />\n          <Key number={7} handleClick={() => { addNumber(7) }} />\n          <Key number={8} handleClick={() => { addNumber(8) }} />\n          <Key number={9} handleClick={() => { addNumber(9) }} />\n        </div>\n        <div className=\"keys\">\n          <Key number={\"X\"} className=\"operator\" handleClick={() => updateOperations(\"X\")} />\n          <Key number={4} handleClick={() => { addNumber(4) }} />\n          <Key number={5} handleClick={() => { addNumber(5) }} />\n          <Key number={6} handleClick={() => { addNumber(6) }} />\n        </div>\n        <div className=\"keys\">\n          <Key number={\"-\"} className=\"operator\" handleClick={() => updateOperations(\"-\")} />\n          <Key number={1} handleClick={() => { addNumber(1) }} />\n          <Key number={2} handleClick={() => { addNumber(2) }} />\n          <Key number={3} handleClick={() => { addNumber(3) }} />\n        </div>\n        <div className=\"keys\">\n          <Key number={\"+\"} className=\"operator\" handleClick={() => updateOperations(\"+\")} />\n          <Key number={\"C\"} className=\"clear\" handleClick={() => clear()} />\n          <Key number={0} handleClick={() => { addNumber(0) }} />\n          <Key number={\"=\"} className=\"equal\" handleClick={() => { Calculate() }} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}